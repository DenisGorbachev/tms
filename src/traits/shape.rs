use std::sync::{Arc, Mutex};

/// A type that implements [`Shape`] is called a "shaper".
/// Shapers run in parallel by default, but can be sequenced if necessary (for example, if one shaper returns a reference that must be used by another shaper)
pub trait Shape<Input> {
    /// This type can be used to return references generated by the shaper, which could be passed into constructors of subsequent shapers
    type Output;
    type Error;

    /// This function should take `&mut self` because that would allow the implementation to change the underlying structure (e.g. cache some data, or interact with the user on the terminal)
    /// This function should return a [`Result`] because it may call other functions which return [`Result`], so it would be convenient to use `?` in the implementation
    /// `input` is wrapped in [`Arc`] and [`Mutex`] to allow concurrent modification from multiple shapers (potentially on different threads)
    fn shape(&mut self, input: Arc<Mutex<Input>>) -> Result<Self::Output, Self::Error>;
}
